# -*- coding: utf-8 -*-
"""sudoku.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EwJn3-E8PnhViUQy7HJ9Cq-fKEzsrMca

数独を解くpythonコード

・すべてのget_関数とsは、cell_name_generator()から生成される
・ループ内で初めて問題の数値をassignする
・assignする数値はpの数値ではなく、sのdictionaryのvalues
・sを更新していくことで、解答を得る

## 数独の解法
- 解法１：一つの空白のセルに着目し、そのセルに関する行と列とエリアから候補を絞り込み、候補がただ一つの数字になった場合、その数字をセルに埋める
- 解法２：
"""

import pprint

#数独の問題の読み込み
# problem = 'sudoku_problem1.txt'

# with open(problem, 'r') as f:
#     p = []
#     for i in range(9):
#         line = list(map(int, f.readline().rstrip()))
#         p.append(line)
# pprint.pprint(p)

p = [[5, 0, 0, 7, 1, 9, 0, 0, 4], [0, 0, 1, 0, 3, 0, 5, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 5, 9, 7, 2, 6, 4, 0],
     [0, 0, 0, 6, 0, 1, 0, 0, 0], [0, 2, 6, 3, 8, 5, 9, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 5, 0, 2, 0, 0],
     [8, 0, 0, 4, 9, 7, 0, 0, 6]]

# settings ------------------------------------------------------
# 各セルに固有の名前を付ける
n = 9
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
area_names = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']


def cell_name_generator():
    numbers = [str(i) for i in nums]
    rows = []
    for i in range(n):
        name = []
        for j in range(n):
            area = area_names[(i // 3) * 3 + j // 3]
            ind = str(((i % 3) * 3 + 1) + j % 3)
            name.append(area + ind)
        rows.append(name)
    return rows


cg_rows = cell_name_generator()

# 各セルの名前と数字の辞書を生成
l_name = [i for j in cg_rows for i in j]
l_p = [i for j in p for i in j]
s = dict(zip(l_name, l_p))


# get_row ------------------------------------------------------
def get_row(name):
    for i, row in enumerate(cg_rows):
        if name in row:
            return row


# targetセルを含まない同エリアの２行の情報
def get_other_rows(name):
    for i, row in enumerate(cg_rows):
        if name in row:
            if (int(name[1]) - 1) // 3 == 0:
                row1 = cg_rows[i + 1]
                row2 = cg_rows[i + 2]
                return row1, row2
            elif (int(name[1]) - 1) // 3 == 1:
                row1 = cg_rows[i - 1]
                row2 = cg_rows[i + 1]
                return row1, row2
            elif (int(name[1]) - 1) // 3 == 2:
                row1 = cg_rows[i - 2]
                row2 = cg_rows[i - 1]
                return row1, row2


# get_column ------------------------------------------------------
# cg_rowをcg_columに変換
cg_columns = [[row[i] for row in cg_rows] for i in range(n)]


def get_column(name):
    for i, column in enumerate(cg_columns):
        if name in column:
            return column


# targetセルを含まない同エリアの２列の情報
def get_other_columns(name):
    for i, column in enumerate(cg_columns):
        if name in column:
            if int(name[1]) % 3 == 1:
                column1 = cg_columns[i + 1]
                column2 = cg_columns[i + 2]
                return column1, column2
            elif int(name[1]) % 3 == 2:
                column1 = cg_columns[i - 1]
                column2 = cg_columns[i + 1]
                return column1, column2
            elif int(name[1]) % 3 == 0:
                column1 = cg_columns[i - 2]
                column2 = cg_columns[i - 1]
                return column1, column2


# get_area ------------------------------------------------------
def get_area(name):
    squares = {}
    for i in range(n):
        l = []
        for j in range((i // 3) * 3, (i // 3 + 1) * 3):
            l.append(cg_rows[j][(i % 3) * 3:(i % 3 + 1) * 3])
        if area_names[i] not in squares:
            squares[area_names[i]] = l
    area = [j for i in squares[name[0]] for j in i]
    area_rows = squares[name[0]]
    if (int(name[1]) - 1) // 3 == 0:
        row_triplet = area_rows[0]
    elif (int(name[1]) - 1) // 3 == 1:
        row_triplet = area_rows[1]
    elif (int(name[1]) - 1) // 3 == 2:
        row_triplet = area_rows[2]
    if int(name[1]) % 3 == 1:
        column_triplet = [col[0] for col in area_rows]
    elif int(name[1]) % 3 == 2:
        column_triplet = [col[1] for col in area_rows]
    elif int(name[1]) % 3 == 0:
        column_triplet = [col[2] for col in area_rows]
    return area, area_rows, row_triplet, column_triplet


# print(get_area('B1')[0])
# print(get_area('B1')[1])
# print(get_area('B1')[2])
# print(get_area('G3')[3])

# debuggin ------------------------------------------------------
# print('行ごとのセルの名前と値の辞書：　' + str(s))
# name = 'A1'
# print('target： ' + name)
# print(name + 'を含む行： ' + str(get_row(name)))
# print(name + 'を含まない同エリアの行： ' + str(get_other_rows(name)))
# print(name + 'を含む列： ' + str(get_column(name)))
# print(name + 'を含まない同エリアの列： ' + str(get_other_columns(name)))
# print(name + 'を含むエリア： ' + str(get_area(name)))
# print('\n')

# solving the problem ------------------------------------------------------
c = 0
while any([s[i] == 0 for i in s]) == True:
    for i in s:
        # solution1 ------------------------------------------------------
        if s[i] == 0:
            target = i
            print(target + '-' * 30)

            # set of row
            # print('set_row' + "-" * 15)
            set_row = set(nums) - (set([s[j] for j in get_row(target)]) - {0})

            # set of column
            # print('set_column' + "-" * 15)
            set_column = set(nums) - (set(s[j]
                                          for j in get_column(target)) - {0})

            # set of areas
            # print('set_area' + "-" * 15)
            set_area = set(nums) - (set(s[j]
                                        for j in get_area(target)[0]) - {0})

            # choices
            # print('set_column' + "-" * 15)
            choices = set_row & set_column & set_area

            # print(set_row)
            # print((set_column))
            # print(set_area)
            print('solution1' + str(choices))

            if len(choices) == 1:
                s[target] = list(choices)[0]

        # solution2 ------------------------------------------------------
        # for the target row
        # print('solution2' + "-" * 15)
        if s[i] == 0:
            set_other_rows1 = set(s[j] for j in get_other_rows(target)[0])
            set_other_rows2 = set(s[j] for j in get_other_rows(target)[1])
            list_row_triplet = [s[j] for j in get_area(target)[2]]
            r_set_area = set(s[j] for j in get_area(target)[0])
            choices2 = (set_other_rows1 & set_other_rows2) - r_set_area - {0}
            if len(choices2) == 1 and list_row_triplet.count(0) == 1:
                s[target] = list(choices2)[0]
                print('solution2' + str(choices2))

        # for the target column
        if s[i] == 0:
            print('-' * 30)
            set_other_columns1 = set(
                s[j] for j in get_other_columns(target)[0])
            set_other_columns2 = set(
                s[j] for j in get_other_columns(target)[1])
            list_column_triplet = [s[j] for j in get_area(target)[3]]
            c_set_area = set(s[j] for j in get_area(target)[0])
            # print(set_other_columns1)
            # print(set_other_columns2)
            # print(list_column_triplet)
            # print(c_set_area)
            choices3 = (
                set_other_columns1 & set_other_columns2) - c_set_area - {0}
            print('solution3' + str(choices3))
            print(list_column_triplet.count(0))
            if len(choices3) == 1 and list_column_triplet.count(0) == 1:
                s[target] = list(choices3)[0]

        print('\n')

    # for area in area_names:
    #     for k in range(1, 10):
    #         target = area + str(k)
    #         if s[target] == 0:
    #             set_area = set(s[j] for j in get_area(target)[0]) - {0}
    #             set_row = set([s[j] for j in get_row(target)]) - {0}
    #             set_column = set(s[j] for j in get_column(target)) - {0}
    #             set_other_rows1 = set(s[j] for j in get_other_rows(target)[0])
    #             set_other_rows2 = set(s[j] for j in get_other_rows(target)[1])
    #             set_other_columns1 = set(
    #                 s[j] for j in get_other_columns(target)[0])
    #             set_other_columns2 = set(
    #                 s[j] for j in get_other_columns(target)[1])
    #             pos = set_other_rows1 & set_other_rows2 & set_other_columns1 & set_other_columns2
    #             choices4 = set(nums) - set_area - set_row - set_column
    #             for m in list(choices4):
    #                 if m in pos:
    #                     s[target] = list(choices4)[0]

    c += 1
    if c == 4:
        break

print(c)

# 埋める必要のあるセルの残数
zeros = [i for i in list(s.values())].count(0)
print('残りの空白の数：　' + str(zeros))


# Result
def output(vals):
    for x in range(n):
        ans = []
        for y in range(n):
            ans.append(str(s[vals[x][y]]))
            if y % 3 == 2:
                ans.append('|')
        print(' '.join(ans))
        if x % 3 == 2 and x < n - 1:
            print('-' * 32)


output(cg_rows)

"""p = [
     [5, 0, 0, 7, 1, 9, 0, 0, 4], 
     [0, 0, 1, 0, 3, 0, 5, 0, 0], 
     [0, 0, 0, 0, 0, 0, 0, 0, 0], 
     [0, 8, 5, 9, 7, 2, 6, 4, 0], 
     [0, 0, 0, 6, 0, 1, 0, 0, 0], 
     [0, 2, 6, 3, 8, 5, 9, 1, 0], 
     [0, 0, 0, 0, 0, 0, 0, 0, 0], 
     [0, 0, 3, 0, 5, 0, 2, 0, 0], 
     [8, 0, 0, 4, 9, 7, 0, 0, 6]]
<<<<<<< HEAD
"""
=======
"""
>>>>>>> 8d1d226956f15bd0032fa4bffd13802f4c5b2d2f
